{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoItem","itemId","title","completed","statusToggle","deleteTodo","className","classNames","type","checked","id","onChange","htmlFor","onClick","TodoList","items","onStatusToggle","onDeleteTodo","map","key","TodosFilter","filterName","currentActiveItems","setActiveItems","href","selected","toUpperCase","slice","App","state","todos","currentId","activeItems","allSelected","handleTitleChange","event","setState","target","value","toggleTodoStatus","todoId","todo","toggleAllTodosStatus","addTodo","preventDefault","trim","newTodo","filter","setActiveTodos","item","clearCompletedTodos","listFilter","this","visibleList","onSubmit","placeholder","every","length","some","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f03e5e19.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ itemId, title, completed, statusToggle, deleteTodo }) => (\n  <li\n    className={classNames({\n      completed,\n    })}\n  >\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        checked={completed}\n        id={`todo-${itemId}`}\n        onChange={() => statusToggle(itemId)}\n      />\n      <label htmlFor={`todo-${itemId}`}>\n        {title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => deleteTodo(itemId)}\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodoItem.propTypes = {\n  itemId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  statusToggle: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ items, onStatusToggle, onDeleteTodo }) => (\n  <ul className=\"todo-list\">\n    {items.map(({ id, title, completed }) => (\n      <TodoItem\n        key={id}\n        title={title}\n        itemId={id}\n        completed={completed}\n        statusToggle={onStatusToggle}\n        deleteTodo={onDeleteTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  onDeleteTodo: PropTypes.func.isRequired,\n  onStatusToggle: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst TodosFilter = ({ filterName, currentActiveItems, setActiveItems }) => (\n\n  <li>\n    <a\n      href={`#/${filterName}`}\n      className={classNames({\n        selected: filterName === currentActiveItems,\n      })}\n      onClick={() => setActiveItems(filterName)}\n    >\n      { `${filterName[0].toUpperCase()}${filterName.slice(1)}` }\n    </a>\n  </li>\n);\n\nTodosFilter.propTypes = {\n  filterName: PropTypes.string.isRequired,\n  currentActiveItems: PropTypes.string.isRequired,\n  setActiveItems: PropTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport TodoList from './components/TodoList';\nimport TodosFilter from './components/TodosFilter';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    title: '',\n    currentId: 1,\n    activeItems: 'all',\n    allSelected: false,\n  };\n\n  handleTitleChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n\n  toggleTodoStatus = (todoId) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  }\n\n  toggleAllTodosStatus = ({ target }) => {\n\n    this.setState(({ todos }) => ({\n      todos: todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      })),\n      allSelected: target.checked,\n    }));\n  }\n\n  addTodo = (event) => {\n    event.preventDefault();\n\n    const { title, currentId } = this.state;\n\n    if (!title.trim()) {\n      this.setState({ title: '' });\n\n      return;\n    }\n\n    const newTodo = {\n      id: currentId,\n      title,\n      completed: false,\n    };\n\n    this.setState(state => ({\n      todos: [...state.todos, newTodo],\n      title: '',\n      currentId: state.currentId + 1,\n    }));\n  }\n\n  deleteTodo = (todoId) => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(todo => todo.id !== todoId),\n    }));\n  }\n\n  setActiveTodos = (item) => {\n    this.setState({ activeItems: item });\n  }\n\n  clearCompletedTodos = () => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  listFilter = (items) => {\n    const { todos } = this.state;\n\n    switch (items) {\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n\n      default:\n        return todos;\n    }\n  }\n\n  render() {\n    const { todos, title, activeItems } = this.state;\n    const visibleList = this.listFilter(activeItems);\n    const todosFilters = ['all', 'active', 'completed'];\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.addTodo}>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={title}\n              onChange={this.handleTitleChange}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.every(todo => todo.completed)}\n            onChange={this.toggleAllTodosStatus}\n          />\n          {todos.length > 0 && (\n            <label\n              htmlFor=\"toggle-all\"\n            >\n              Mark all as complete\n            </label>\n          )}\n\n          <TodoList\n            items={visibleList}\n            onStatusToggle={this.toggleTodoStatus}\n            onDeleteTodo={this.deleteTodo}\n          />\n        </section>\n\n        {todos.length > 0 && (\n          <footer className=\"footer\">\n\n            <span className=\"todo-count\">\n              {todos.filter(todo => !todo.completed).length}\n              {' '}\n              items left\n            </span>\n\n            <ul className=\"filters\">\n              {todosFilters.map(filter => (\n                <TodosFilter\n                  key={filter}\n                  filterName={filter}\n                  currentActiveItems={activeItems}\n                  setActiveItems={this.setActiveTodos}\n                />\n              ))}\n            </ul>\n\n            {todos.some(todo => todo.completed) && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={this.clearCompletedTodos}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        )}\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}