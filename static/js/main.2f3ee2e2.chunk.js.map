{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","helpers/filters.js","App.js","index.js"],"names":["TodoItem","state","editing","handleTitleEditing","target","key","type","props","itemId","editTodo","deleteTodo","value","trim","acceptEditing","setEditingMode","bool","setState","this","title","completed","statusToggle","className","classNames","checked","id","onChange","onDoubleClick","onClick","autoFocus","defaultValue","onBlur","onKeyDown","React","Component","TodoList","items","onStatusToggle","onDeleteTodo","onEditTodo","map","TodosFilter","filterName","currentActiveItems","setActiveItems","href","toLowerCase","selected","FILTERS","all","active","App","todos","currentId","activeItems","handleTitleChange","event","toggleTodoStatus","todoId","todo","toggleAllTodosStatus","addTodo","preventDefault","newTodo","filter","setActiveTodos","item","clearCompletedTodos","listFilter","storageTodos","JSON","parse","localStorage","getItem","storageId","prevProps","prevState","setItem","stringify","visibleList","numOfActiveTodos","length","onSubmit","placeholder","every","htmlFor","Object","values","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f3ee2e2.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/no-autofocus */\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends React.Component {\n  state = {\n    editing: false,\n  };\n\n  handleTitleEditing = ({ target, key, type }) => {\n    const { itemId, editTodo, deleteTodo } = this.props;\n    const value = target.value.trim();\n    const acceptEditing = (key === 'Enter' || type === 'blur');\n\n    if (acceptEditing && value) {\n      editTodo(itemId, value);\n      this.setEditingMode(false);\n    }\n\n    if (acceptEditing && !value) {\n      deleteTodo(itemId);\n      this.setEditingMode(false);\n    }\n\n    if (key === 'Escape') {\n      this.setEditingMode(false);\n    }\n  }\n\n  setEditingMode = (bool) => {\n    this.setState({ editing: bool });\n  }\n\n  render() {\n    const { itemId, title, completed, statusToggle, deleteTodo } = this.props;\n    const { editing } = this.state;\n\n    return (\n      <li\n        className={classNames({\n          completed,\n          editing,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={completed}\n            id={`todo-${itemId}`}\n            onChange={() => statusToggle(itemId)}\n          />\n          <label\n            onDoubleClick={() => this.setEditingMode(true)}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => deleteTodo(itemId)}\n          />\n        </div>\n        {editing && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            autoFocus\n            defaultValue={title}\n            onBlur={this.handleTitleEditing}\n            onKeyDown={this.handleTitleEditing}\n          />\n        )}\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  itemId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  statusToggle: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  items,\n  onStatusToggle,\n  onDeleteTodo,\n  onEditTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {items.map(({ id, title, completed }) => (\n      <TodoItem\n        key={id}\n        title={title}\n        itemId={id}\n        completed={completed}\n        statusToggle={onStatusToggle}\n        deleteTodo={onDeleteTodo}\n        editTodo={onEditTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  onDeleteTodo: PropTypes.func.isRequired,\n  onStatusToggle: PropTypes.func.isRequired,\n  onEditTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter = ({\n  filterName,\n  currentActiveItems,\n  setActiveItems,\n}) => (\n  <li>\n    <a\n      href={`#/${filterName.toLowerCase()}`}\n      className={classNames({\n        selected: filterName === currentActiveItems,\n      })}\n      onClick={() => setActiveItems(filterName)}\n    >\n      {filterName}\n    </a>\n  </li>\n);\n\nTodosFilter.propTypes = {\n  filterName: PropTypes.string.isRequired,\n  currentActiveItems: PropTypes.string.isRequired,\n  setActiveItems: PropTypes.func.isRequired,\n};\n","export const FILTERS = {\n  all: 'All',\n  completed: 'Completed',\n  active: 'Active',\n};\n","import React from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\nimport { FILTERS } from './helpers/filters';\n\nexport default class App extends React.Component {\n  state = {\n    todos: [],\n    title: '',\n    currentId: 1,\n    activeItems: FILTERS.all,\n  };\n\n  componentDidMount() {\n    const storageTodos = JSON.parse(localStorage.getItem('todos'));\n    const storageId = JSON.parse(localStorage.getItem('currentId'));\n\n    if (storageTodos) {\n      this.setState({\n        todos: storageTodos,\n        currentId: storageId,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { todos, currentId } = this.state;\n\n    if (this.state.todos !== prevState.todos) {\n      localStorage.setItem('todos', JSON.stringify(todos));\n      localStorage.setItem('currentId', JSON.stringify(currentId));\n    }\n  }\n\n  handleTitleChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n\n  toggleTodoStatus = (todoId) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  }\n\n  toggleAllTodosStatus = ({ target }) => {\n    this.setState(({ todos }) => ({\n      todos: todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      })),\n    }));\n  }\n\n  addTodo = (event) => {\n    event.preventDefault();\n\n    const { title, currentId } = this.state;\n\n    if (!title.trim()) {\n      this.setState({ title: '' });\n\n      return;\n    }\n\n    const newTodo = {\n      id: currentId,\n      title,\n      completed: false,\n    };\n\n    this.setState(state => ({\n      todos: [...state.todos, newTodo],\n      title: '',\n      currentId: state.currentId + 1,\n    }));\n  }\n\n  deleteTodo = (todoId) => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(todo => todo.id !== todoId),\n    }));\n  }\n\n  setActiveTodos = (item) => {\n    this.setState({ activeItems: item });\n  }\n\n  clearCompletedTodos = () => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  listFilter = (items) => {\n    const { todos } = this.state;\n\n    switch (items) {\n      case FILTERS.active:\n        return todos.filter(todo => !todo.completed);\n\n      case FILTERS.completed:\n        return todos.filter(todo => todo.completed);\n\n      default:\n        return todos;\n    }\n  }\n\n  editTodo = (itemId, value) => {\n    this.setState(({ todos }) => ({\n      todos: todos.map((todo) => {\n        if (todo.id !== itemId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          title: value,\n        };\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, title, activeItems } = this.state;\n    const visibleList = this.listFilter(activeItems);\n    const numOfActiveTodos = todos.filter(todo => !todo.completed).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.addTodo}>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={title}\n              onChange={this.handleTitleChange}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.every(todo => todo.completed)}\n            onChange={this.toggleAllTodosStatus}\n          />\n          {todos.length > 0 && (\n            <label\n              htmlFor=\"toggle-all\"\n            >\n              Mark all as complete\n            </label>\n          )}\n\n          <TodoList\n            items={visibleList}\n            onEditTodo={this.editTodo}\n            onStatusToggle={this.toggleTodoStatus}\n            onDeleteTodo={this.deleteTodo}\n          />\n        </section>\n\n        {todos.length > 0 && (\n          <footer className=\"footer\">\n\n            <span className=\"todo-count\">\n              {numOfActiveTodos}\n              {' '}\n              item\n              {numOfActiveTodos !== 1 && 's'}\n              {' '}\n              left\n            </span>\n\n            <ul className=\"filters\">\n              {Object.values(FILTERS).map(filter => (\n                <TodosFilter\n                  key={filter}\n                  filterName={filter}\n                  currentActiveItems={activeItems}\n                  setActiveItems={this.setActiveTodos}\n                />\n              ))}\n            </ul>\n\n            {todos.some(todo => todo.completed) && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={this.clearCompletedTodos}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        )}\n\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}